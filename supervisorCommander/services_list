#!/usr/bin/python
"""
gather all the supervisord.conf files and make sensu checks for all
services plus a web page with links to all services

the sensu checks may be http GET to the service itself, or a
supervisor xmlrpc check to see if the service process is running
(usually a weaker test)
"""
import xmlrpclib, subprocess, json
from genshi.template import TemplateLoader


def getServices(host):
    addr = "http://%s:9001" % host
    if host == "bang-local":
        host = 'bang'
        addr = "http://bang:9002"
    supervisor = xmlrpclib.Server(addr).supervisor
    def maybePortnum(name):
        if name == 'nginx':
            return 80
        tail = row['name'].split('_')[-1]
        try:
            return int(tail)
        except ValueError:
            return None
    return [{'host' : host, 
             'supervisorPort' : int(addr.split(':')[-1]), 
             'servicePort' : maybePortnum(row['name']),
             'name' : row['name']} 
             for row in supervisor.getAllConfigInfo()]

def getAllServices():
    return sum((getServices(h) for h in ['bang', 'bang-local', 'dash', 'slash', 'star']), [])


def httpChecks(host, serviceName):
    """
    for this supervisor service, are there any http pages we can
    check? The return value is a list of (name, urlPath) that
    need to return successfully.

    if possible, arrange for a failure of the supervisor service to
    mute a failure of these tests, since of course they're broken when
    the service isn't running.
    """
    NOMAIL = {"mail":False}
    return {
        ('slash', 'webcam_9020') : [('cam sideYard', '/sideYard', NOMAIL),
                                    ('cam livingRoom', '/livingRoom', NOMAIL),
                                    ('cam garage', '/garage', NOMAIL)],
        #('slash', 'webcam_9021') : [('cam laundry', '/laundry', NOMAIL)], # offline
        ('slash', 'webcam_9023') : [('cam frontDoor', '/frontDoor', NOMAIL)],
        ('slash', 'frontDoorArduino_9080') : [('front door arduino', '/', {})],
        ('slash', 'usbReset_9100') : [('usbReset', '/', {})],
        ('dash', 'shiftweb_9014'): [('shiftweb', '/', {})],
        ('star', 'webcam_9016'): [('cam ari', '/0', {})],
        ('slash', 'websound_9049'): [('websound', '/', {})],
        ('dash', 'zwave_9082'): [('zwave', '/', {})],
        #('bang', 'bluetooth_9077'): [('bluetooth watcher', '/', {})], # broken since ubuntu upgrade
        ('bang', 'diarybot_9048')          : [('diarybot root', '/', {})],
        ('bang', 'freeway_8009')           : [], # in clients.json instead
        ('bang', 'frontDoorMessage_9081')  : [('frontDoorMessage', '/', {})],
        ('bang', 'magma_dyncommands_8007') : [], # in clients.json instead
        ('bang', 'nginx')                  : [('bigasterisk home page', '/', {})], # wrong vhost?
        ('bang', 'openid_proxy_9023')      : [('loginBar', '/_loginBar', {})],
        ('bang', 'photo_8030')             : [('photo', '/events', {})],
        ('bang', 'photo_watchMail_9082')   : [('photo watchMail', '/', {})],
        ('bang', 'portUpdate_9055')        : [('heater update', '/', {})],
        ('bang', 'reasoning_9071')         : [('reasoning', '/status', {})],
        ('bang', 'recentTransactions_9094'): [('recentTransactions', '/', {})],
        ('bang', 'sba_9060')               : [('bedroom shiftbrite', '/', NOMAIL)],
        ('bang', 'sfd_9024')               : [], # in clients.json instead
        ('bang', 'theaterArduino_9056')    : [('arduino ping', '/', {})],
        ('bang', 'theaterArduino_watchpins_9069') : [('theater arduino watchpins', '/graph', {})],
        ('bang', 'tomatoWifi_9070')        : [('tomatoWifi', '/', {})],
        ('bang', 'dpms_9095')              : [('dpms', '/', {})],
        ('bang', 'vist2rdf_9103')          : [('checkvist reader', '/', {})],
        ('bang', 'webcam_9053')            : [('cam bedroom', '/0', NOMAIL)],
        ('bang', 'gcalendarwatch_9105')    : [('gcalendarwatch poller', '/', {})],
        }.get((host, serviceName), [])
    
    return []

svcs = getAllServices()

def httpCheck(host, servicePort, path):
    return {'aggregate':True,
            'subscribers':['host-bang'],
            'interval':900,
            'command':'/usr/bin/lwp-request -t 1 -H "x-foaf-agent: http://bigasterisk.com/foaf/sensu" http://%(host)s:%(servicePort)s%(path)s' % vars()}

checks = {}

for svc in svcs:

    checks['supervisor-%(host)s-%(name)s' % svc] = {
        'subscribers':['host-bang'], # sic- all checks can be run from here
        'aggregate' : True,
        'interval':900,
        'command':'supervisor_check %(host)s %(supervisorPort)s %(name)s' % svc}

    for name, path, more in httpChecks(svc['host'], svc['name']):
        checks[name.replace(' ', '_')] = c = httpCheck(svc['host'], svc['servicePort'], path)
        c.update(more)
        
out = open("/my/proj/puppet/sensu-files/generated/serviceChecks.json", "w")
out.write('{"note" : "autogenerated by services_list", "checks": {\n')
items = sorted(checks.items())
for name, body in items:
    out.write('\n  %s: %s' % (json.dumps(name), json.dumps(body)))
    if name != items[-1][0]:
        out.write(",")
out.write('}}')
out.close()


loader = TemplateLoader(["."])
tmpl = loader.load('services_list.html')
byHost = {}
for svc in svcs:
    if svc['servicePort'] is None:
        continue
    byHost.setdefault(svc['host'], []).append(svc)
stream = tmpl.generate(
    byHost=byHost,
    )

f = open("/my/site/magma/build_services.html", "w")
f.write(stream.render())
f.close()

