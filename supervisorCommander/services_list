#!/usr/bin/python
"""
gather all the supervisord.conf files and make nagios checks for all
services plus a web page with links to all services

the nagios checks may be http GET to the service itself, or a
supervisor xmlrpc check to see if the service process is running
(usually a weaker test)
"""
import xmlrpclib, subprocess
from genshi.template import TemplateLoader


def getServices(host):
    addr = "http://%s:9001" % host
    if host == "bang-local":
        host = 'bang'
        addr = "http://bang:9002"
    supervisor = xmlrpclib.Server(addr).supervisor
    def maybePortnum(name):
        if name == 'nginx':
            return 80
        tail = row['name'].split('_')[-1]
        try:
            return int(tail)
        except ValueError:
            return None
    return [{'host' : host, 
             'supervisorPort' : int(addr.split(':')[-1]), 
             'servicePort' : maybePortnum(row['name']),
             'name' : row['name']} 
             for row in supervisor.getAllConfigInfo()]

def getAllServices():
    return sum((getServices(h) for h in ['bang', 'bang-local', 'dash', 'slash', 'star', 'space']), [])


def httpChecks(host, serviceName):
    """
    for this supervisor service, are there any http pages we can
    check? The return value is a list of (name, urlPath) that
    need to return successfully.

    if possible, arrange for a failure of the supervisor service to
    mute a failure of these tests, since of course they're broken when
    the service isn't running.
    """
    NOMAIL = ''#'notifications_enabled 0'
    return {
        ('slash', 'webcam_9020') : [('cam sideYard', '/sideYard', NOMAIL),
                                    ('cam livingRoom', '/livingRoom', NOMAIL),
                                    ('cam garage', '/garage', NOMAIL)],
        ('slash', 'webcam_9021') : [('cam laundry', '/laundry', NOMAIL)],
        ('space', 'webcam_9023') : [('cam frontDoor', '/frontDoor', NOMAIL)],
        ('space', 'frontdoor_9080') : [('front door arduino', '/', '')],
        ('dash', 'shiftweb_9014'): [('shiftweb', '/', '')],
        ('star', 'webcam_9016'): [('cam ari', '/0', '')],
        ('bang', 'webcam_9053'): [('cam bedroom', '/0', NOMAIL)],
        ('bang', 'nginx'): [('bigasterisk home page', '/', '')], # wrong vhost?
        ('bang', 'sfd_9024'): [('sfd root', '/', '')],
        ('bang', 'diarybot_9048'): [('diarybot root', '/', '')],
        ('bang', 'freeway_8009'): [('freeway root', '/', '')],
        ('bang', 'arduinoport_9056'): [('arduino ping', '/', '')],
        ('bang', 'portUpdate_9055'): [('heater update', '/', '')],
        }.get((host, serviceName), [])
    
    return []

svcs = getAllServices()

# this multi-file stupidness is because when a nagios config file crosses about
# 12k, nagios truncates it and reports an error on whatever the last
# broken line happens to be. Using nagios 3.2.0-4ubuntu2
out = None
serial = 0
written = 0
for svc in svcs:
    if out is None or written > 15:
        serial += 1
        # warning- doesnt clean up old ones
        out = open("/etc/nagios3/conf.d/supervisor-%s.cfg" % serial, "w")
        out.write("# autogenerated by services_list\n\n")
        written = 0

    out.write("""
define service { 
  use generic-service 
  host_name %(host)s
  service_description %(name)s
  check_command sup_check!%(supervisorPort)s!%(name)s
}
""" % svc)

    for name, path, more in httpChecks(svc['host'], svc['name']):
        svc.update(dict(checkName=name, path=path, cmd=name.replace(' ','_'), more=more))
        out.write("""
define command {
  command_name %(cmd)s
  command_line /usr/lib/nagios/plugins/check_http -k "x-foaf-agent: http://bigasterisk.com/foaf/nagios" -H %(host)s -p %(servicePort)s --url %(path)s --warning=1
}
define service {
  use generic-service
  host_name %(host)s
  service_description %(checkName)s
  check_command %(cmd)s
  %(more)s
}

""" % svc)
        
        
    written += 1


loader = TemplateLoader(["."])
tmpl = loader.load('services_list.html')
byHost = {}
for svc in svcs:
    if svc['servicePort'] is None:
        continue
    byHost.setdefault(svc['host'], []).append(svc)
stream = tmpl.generate(
    byHost=byHost,
    )

f = open("/my/site/magma/build_services.html", "w")
f.write(stream.render())
f.close()

subprocess.call(['/etc/init.d/nagios3', 'reload'])
# now restart nagios to see its config file
