#!/usr/bin/python
"""
standalone twisted web server that shows a UI for changing the color of a box.

todo:
- make all the uris resolve to docs
- get the timezones right
- don't show any URLs, just labels
- command property inspector
- switch to persistent store
- make a cmdline demo that also adds commands
- addCommand http call should return the new issue uri (or nothing)

"""
import sys, atexit
from twisted.internet import reactor
from twisted.python import log
from nevow.appserver import NevowSite
from nevow import rend, static, loaders, inevow, json, url
from rdflib.Graph import ConjunctiveGraph, ReadOnlyGraphAggregate
from rdflib import Literal, URIRef, Namespace, StringInputSource

sys.path.append('/usr/lib/python%s/site-packages/oldxml/_xmlplus/utils' %
                sys.version[:3])
import iso8601

import db
from commandpage import CommandSite, returnPage

XS = Namespace("http://www.w3.org/2001/XMLSchema#")
CMD = Namespace("http://bigasterisk.com/magma/cmd/")

class Main(CommandSite, rend.Page):
    docFactory = loaders.xmlfile("colorBoxDemo.html")

    def child_boxColor(self, ctx):
        """
        /boxColor returns a string like '#ff0000' for what color the
        box currently is
        """
        cmd, t, u = self.cmdlog.lastCommandOfClass(CMD['BoxColor'])
        color = self.cmdlog.graph.value(cmd, CMD['color'])
        return returnPage("text/plain", color.encode('utf-8'))

    def child_static(self, ctx):
        return static.File("static")

        
seedGraph = ConjunctiveGraph()
seedGraph.parse("colorBoxSeed.n3", format='n3')

outGraph = ConjunctiveGraph('Sleepycat')
outGraph.open('db')
atexit.register(lambda: outGraph.close(commit_pending_transaction=True))

commandLog = db.CommandLog(ReadOnlyGraphAggregate([seedGraph, outGraph]),
                           writeGraph=outGraph)

log.startLogging(sys.stdout)

reactor.listenTCP(9014, NevowSite(Main(commandLog)))
reactor.run()
