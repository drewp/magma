#!/usr/bin/python
import sys
from twisted.internet import reactor
from twisted.python import log
from nevow.appserver import NevowSite
from nevow import rend, static, loaders, inevow, json, url
from rdflib import Literal, URIRef, Variable

from commandpage import CommandSite
from dbclient import nowLiteral, getCommandLog
from db import CMD, CL

class Main(CommandSite, rend.Page):
    docFactory = loaders.xmlfile("lights.html")

    def child_static(self, ctx):
        return static.File("static")

    def child_state(self, ctx):
        """
        get state?name=bedroomred -> {'value' : 'off'}
        post state?name=bedroomred <- value=on
        """
        cmdlog = self.cmdlog
        class Ret(rend.Page):
            def renderHTTP(self, ctx):

                # should be calling child_addCommand?
                
                name = ctx.arg('name')

                cls = {'bedroomred' : CMD['RedLight'],
                       'deck' : CMD['DeckLight']}[name]

                req = inevow.IRequest(ctx)
                if req.method == 'GET':
                    req.setHeader("Content-Type", "application/json")
                    return lastCommandValueJson(cmdlog, cls=cls)
                elif req.method == 'POST':

                    cmds = cmdlog.graph.queryd(
                        "SELECT ?cmd WHERE { ?cmd a ?cls ; cl:value ?value }",
                        initBindings={Variable("cls") : cls,
                                      Variable("value") :
                                      Literal(ctx.arg('value'))})
                    if len(cmds) != 1:
                        raise ValueError("found %s commands that turn %s %s: %s" %
                                         (len(cmds), cls, ctx.arg('value'), cmds))
                    cmdlog.addCommand(
                        cmds[0]['cmd'],
                        nowLiteral(),
                        URIRef('http://bigasterisk.com/magma/user_tbd'))
                    return url.URL.fromString("http://bigasterisk.com/magma/")
                else:
                    raise NotImplementedError
        return Ret()

def lastCommandValueJson(commandLog, cls):
    (cmd, t, u) = commandLog.lastCommandOfClass(cls)
    value = commandLog.graph.value(cmd, CL['value'])
    print "last", (cmd, t, u, value)
    return json.serialize({u'value' : unicode(value)})


commandLog = getCommandLog()

log.startLogging(sys.stdout)

reactor.listenTCP(9018, NevowSite(Main(commandLog)))
reactor.run()
