#!/usr/bin/python
import sys
from twisted.internet import reactor
from twisted.python import log
from nevow.appserver import NevowSite
from nevow import rend, static, loaders, inevow, json, url
from rdflib import Literal, URIRef, Variable
sys.path.append("/my/proj/exchangeMeeting")
from nevowopenid import WithOpenid

sys.path.append("..")
sys.path.append('/usr/lib/python2.6/dist-packages/oldxml/_xmlplus/utils')

from commandpage import CommandSite
from commandinference.dbclient import nowLiteral, getCommandLog
from commandinference.db import CMD, CL

class Main(CommandSite, rend.Page, WithOpenid):
    docFactory = loaders.xmlfile("lights.html")

    def locateChild(self, ctx, segments):
        try:
            self.identity = getForwardedIdentity(inevow.IRequest(ctx))
            return rend.Page.locateChild(self, ctx, segments)
        except ValueError:
            return WithOpenid.locateChild(self, ctx, segments)        

    def verifyIdentity(self):
        if not self.cmdlog.graph.contains((URIRef(self.identity),
                                           CL.perm, CL.allowed)): 
            raise ValueError("not authorized")

    def fullUrl(self, ctx):
        request = inevow.IRequest(ctx)
        return 'http://bigasterisk.com/magma/light' + request.path
    
    def child_static(self, ctx):
        return static.File("static")

    def child_state(self, ctx):
        """
        get state?name=bedroomred -> {'value' : 'off'}
        post state?name=bedroomred <- value=on
        """
        cmdlog = self.cmdlog
        user = URIRef(self.identity)
        class Ret(rend.Page):
            def renderHTTP(self, ctx):
                req = inevow.IRequest(ctx)


                # should be calling child_addCommand?
                
                name = ctx.arg('name')

                cls = {'bedroomred' : CMD['RedLight'],
                       'deck' : CMD['DeckLight']}[name]

                if req.method == 'GET':
                    req.setHeader("Content-Type", "application/json")
                    return lastCommandValueJson(cmdlog, cls=cls)
                elif req.method == 'POST':

                    cmds = cmdlog.graph.queryd(
                        "SELECT ?cmd WHERE { ?cmd a ?cls ; cl:value ?value }",
                        initBindings={Variable("cls") : cls,
                                      Variable("value") :
                                      Literal(ctx.arg('value'))})
                    if len(cmds) != 1:
                        raise ValueError("found %s commands that turn %s %s: %s" %
                                         (len(cmds), cls, ctx.arg('value'), cmds))
                    cmdlog.addCommand(cmds[0]['cmd'], nowLiteral(), user)
                    return url.URL.fromString("http://bigasterisk.com/magma/")
                else:
                    raise NotImplementedError
        return Ret()

def getForwardedIdentity(req):
    """openid could set identity, but i want to pass that id between
    servers. maybe this is dumb; each server ought to be able to get
    its own openid proof"""
    h = req.getHeader('x-identity-forward')
    if h is None or not h.startswith('secret-8-'):
        raise ValueError("no identity found")
    req.setHeader('x-identity-forward', h)
    return h.split('-', 2)[-1]

def lastCommandValueJson(commandLog, cls):
    (cmd, t, u) = commandLog.lastCommandOfClass(cls)
    value = commandLog.graph.value(cmd, CL['value'])
    print "last", (cmd, t, u, value)
    return json.serialize({u'value' : unicode(value)})


commandLog = getCommandLog()

log.startLogging(sys.stdout)

reactor.listenTCP(9018, NevowSite(Main(commandLog)))
reactor.run()
