#!/usr/bin/python
"""
watch for heater commands and send pin signals to io.solarisParport

also watch commands for the remote-controlled lights
"""
import sys, time, atexit

sys.path.append('..') # for commandinference
from twisted.internet import reactor
from rdflib import Namespace, RDF
import restkit
from xml.utils import iso8601
from cmdline import getCommandLog
from commandinference.db import CMD, CL, ROOM

from twisted.internet import task

PORT = Namespace("http://bang.bigasterisk.com/parport/parport0#")


commandLog = getCommandLog()

class Loop(object):
    def __init__(self):
        self.lastMsg = None
        self.lastHeater = None
        self.lastLight = {} # cmdclass : value

        self.pollClasses = [row['cls'] for row in commandLog.graph.queryd(
            "SELECT ?cls WHERE { ?cls a cmd:PollMe . }")]
                
    def poll(self):
        if 0:
            for commandClass in self.pollClasses:
                cmd, t, user = commandLog.lastCommandOfClass(commandClass)
                value = commandLog.graph.value(cmd, CL['value'])

                if self.lastLight.get(commandClass) != value:
                    oneShotPin = commandLog.graph.value(cmd, ROOM['oneShot'])
                    if oneShotPin is not None:
                        raise NotImplementedError("pulse")
                        self.sendPin(oneShotPin, 1) # it automatically turns off
                    else:
                        raise NotImplementedError("don't know how to set %s" % cmd)
                    self.lastLight[commandClass] = value

        self.pollHeater()

    def pollHeater(self):
        # this is a special case mostly because it was written
        # first. Hopefully it can be folded into the more-general
        # poller above.
        try:
            cmd, t, user = commandLog.lastCommandOfClass(CMD['Heater'])
            now = time.time()
            if cmd == CMD['heaterOff']:
                self.sendHeater(False)
            elif commandLog.graph.contains((cmd, RDF.type, CMD['TimedOn'])):
                mins = float(commandLog.graph.value(cmd, CL['onForMins']))
                endTime = iso8601.parse(str(t)) + mins * 60
                if endTime > now:
                    self.boringMsg("heater on, %s min left" %
                                   ((endTime - now) / 60))
                    self.sendHeater(True)
                else:
                    # last cmd expired; we should now look at previous ones
                    self.sendHeater(False)
        except Exception, e:
            print "emergency off: %s" % e
            self.sendHeater(False)
            raise

    def boringMsg(self, msg, minInterval=120):
        """throttled print"""
        now = time.time()
        if now - minInterval > self.lastMsg:
            print msg
            self.lastMsg = now

    def sendPin(self, addr, value):
        """addr is the bit position, starting at 0 LSB"""
        print "send %s = %s" % (addr, value)
        restkit.Resource("http://bang:9032/").post(
            "pin/%s" % (addr + 2),
            value=str(bool(value)).lower())
        
    def sendHeater(self, on):
        if on != self.lastHeater: # this assumes we're the only one
                                # talking to the heater pin, which
                                # might not be true
            self.sendPin(3, int(on))
        self.lastHeater = on

loop = Loop()
atexit.register(lambda: loop.sendHeater(False))

# it would be nice to slow this way down, once db.py sends us pings
# when commands are added
task.LoopingCall(loop.poll).start(2)
print "watching command log for new commands"
reactor.run()
