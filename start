#!/usr/bin/python
import os, sys
from twisted.internet import reactor
from twisted.python import log
from twisted.python.util import sibpath
from twisted.web.client import getPage
from twisted.internet.defer import inlineCallbacks, returnValue
from nevow.appserver import NevowSite
from nevow import rend, static, loaders, tags as T, inevow, json
sys.path.append("/my/proj/exchangeMeeting")
from nevowopenid import WithOpenid
from rdflib.Graph import Graph
from rdflib import URIRef

"""
need ajaxy supervisor interface

this should use openid, with an extra list of magic query params that
also fire the same identity=drewp code that openid can finish
with. then we bookmark the magic urls in our phones

"""

os.chdir("/my/site/magma")

class Running(rend.Page):
    docFactory = loaders.stan(T.img(src="out"))
    def child_out(self, ctx):
        return static.File("running/out.png")

class Main(rend.Page, WithOpenid):
    def __init__(self, graph):
        self.graph = graph
    def child_(self, ctx):
        import homepage
        reload(homepage)
        p = homepage.HomePage()
        p.identity = self.identity
        return p

    def verifyIdentity(self):
        if (URIRef(self.identity),
            URIRef("http://bigasterisk.com/ns/command/v1#perm"),
            URIRef("http://bigasterisk.com/ns/command/v1#allowed")) not in self.graph:            
            raise ValueError("not authorized")

    def fullUrl(self, ctx):
        request = inevow.IRequest(ctx)
        return 'http://bigasterisk.com/magma' + request.path
    
    def child_running(self, ctx):
        return Running()
    def child_net(self, ctx):
        return static.File("nets.html")
    def child_images(self, ctx):
        return static.File("images")

setattr(Main, "child_dojo-0.4.2-ajax", static.File("dojo-0.4.2-ajax"))

log.startLogging(sys.stdout)

graph = Graph()
graph.parse("/my/site/magma/commandinference/auth.n3", format="n3")

reactor.listenTCP(8006, NevowSite(Main(graph)))
reactor.run()
